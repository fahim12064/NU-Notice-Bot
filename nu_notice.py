import os
import json
import csv
import requests
import time
from playwright.sync_api import sync_playwright
from urllib.parse import urljoin

# --- Configuration ---
CSV_FILE_NAME = "scraped_notices.csv"
USER_IDS_FILE = "user_ids.json"
# ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶∏‡¶≤ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶®
TELEGRAM_BOT_TOKEN = "7976309371:AAE6FFKsxllfEUH7PrJk6tdjIXdSCGCspHk"
BASE_URL = "https://www.nu.ac.bd/"
LAST_UPDATE_ID_FILE = "last_update_id.txt"


# ---------- Utility Functions ----------

def load_user_ids():
    """JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡•§"""
    if not os.path.exists(USER_IDS_FILE):
        return set()
    try:
        with open(USER_IDS_FILE, "r", encoding="utf-8") as f:
            ids = json.load(f)
            return {str(i) for i in ids}
    except (FileNotFoundError, json.JSONDecodeError):
        return set()


def save_user_ids(user_ids):
    """‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø JSON ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßá‡•§"""
    with open(USER_IDS_FILE, "w", encoding="utf-8") as f:
        json.dump(list(user_ids), f, indent=2, ensure_ascii=False)


def get_last_update_id():
    """‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡•§"""
    if not os.path.exists(LAST_UPDATE_ID_FILE):
        return 0
    try:
        with open(LAST_UPDATE_ID_FILE, "r") as f:
            return int(f.read().strip())
    except (ValueError, FileNotFoundError):
        return 0


def save_last_update_id(update_id):
    """‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßá‡•§"""
    with open(LAST_UPDATE_ID_FILE, "w") as f:
        f.write(str(update_id))


def handle_telegram_updates():
    """‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá‡•§"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ö†Ô∏è ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§")
        return

    print("\n--- ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ---")
    user_ids = load_user_ids()
    last_update_id = get_last_update_id()
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates?offset={last_update_id + 1}&timeout=10"

    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        updates = response.json().get("result", [])
    except Exception as e:
        print(f"‚ùå ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ API ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
        return

    if not updates:
        print("üëç ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶®‡ßá‡¶á‡•§")
        return

    new_users_found = False
    max_update_id = last_update_id
    for update in updates:
        max_update_id = max(max_update_id, update["update_id"])
        msg = update.get("message", {})
        if not msg or "text" not in msg or "chat" not in msg:
            continue

        chat_id = str(msg["chat"]["id"])
        if msg["text"].strip().lower() == "/start" and chat_id not in user_ids:
            user_ids.add(chat_id)
            new_users_found = True
            first_name = msg.get("from", {}).get("first_name", "‡¶¨‡¶®‡ßç‡¶ß‡ßÅ")
            print(f"‚úÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®: {chat_id} ({first_name})")
            # Welcome message
            welcome_text = (
                f"üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, {first_name}!\n\n‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶ú‡¶æ‡¶§‡ßÄ‡ßü ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ‡¶≤‡ßü‡ßá‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶¨‡ßá‡¶®‡•§")
            try:
                requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                              json={"chat_id": chat_id, "text": welcome_text})
            except Exception as e:
                print(f"‚ùå ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {e}")

    if new_users_found:
        save_user_ids(user_ids)
        print(f"üíæ ‡¶Æ‡ßã‡¶ü {len(user_ids)} ‡¶ú‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá user_ids.json ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

    save_last_update_id(max_update_id)


def load_scraped_urls_from_csv():
    """CSV ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡ßá‡¶∞ URL-‡¶ó‡ßÅ‡¶≤‡ßã ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡•§"""
    urls = set()
    if not os.path.exists(CSV_FILE_NAME):
        return urls
    try:
        with open(CSV_FILE_NAME, "r", encoding="utf-8", newline="") as f:
            reader = csv.reader(f)
            next(reader, None)  # ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®
            for row in reader:
                if len(row) > 1 and row[1].strip().startswith("http"):
                    urls.add(row[1].strip())
    except Exception as e:
        print(f"‚ùå CSV ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßú‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
    return urls


def append_notice_to_csv(notice):
    """‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ CSV ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó (append) ‡¶ï‡¶∞‡ßá‡•§"""
    file_exists = os.path.exists(CSV_FILE_NAME) and os.path.getsize(CSV_FILE_NAME) > 0
    try:
        with open(CSV_FILE_NAME, "a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            if not file_exists:
                writer.writerow(["Notice Title", "URL"])  # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶§‡ßÅ‡¶® ‡¶π‡¶≤‡ßá ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
            writer.writerow([notice["title"], notice["url"]])
    except Exception as e:
        print(f"‚ùå CSV ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")


def safe_markdown_v2(text):
    """‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá‡¶∞ MarkdownV2 ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶è‡¶∏‡ßç‡¶ï‡ßá‡¶™ ‡¶ï‡¶∞‡ßá‡•§"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return "".join(f"\\{ch}" if ch in escape_chars else ch for ch in text)


def send_telegram_notification(notice):
    """‡¶∏‡¶ï‡¶≤ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡ßü‡•§"""
    user_ids = load_user_ids()
    if not user_ids:
        print("ü§∑‚Äç‚ôÇÔ∏è ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶®‡ßá‡¶á‡•§")
        return

    title = safe_markdown_v2(notice['title'])
    message = f"üîî *‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡ßã‡¶ü‡¶ø‡¶∂*\n\n{title}\n\nüîó [‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®]({notice['url']})"

    print(f"‚úâÔ∏è {len(user_ids)} ‡¶ú‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    for chat_id in user_ids:
        try:
            response = requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                json={"chat_id": chat_id, "text": message, "parse_mode": "MarkdownV2",
                      "disable_web_page_preview": True},
                timeout=10
            )
            if response.status_code != 200:
                print(f"   - {chat_id} ‡¶Ü‡¶á‡¶°‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {response.text}")
            time.sleep(0.5)
        except Exception as e:
            print(f"   - {chat_id} ‡¶Ü‡¶á‡¶°‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")


def scrape_nu_notices():
    """‡¶ú‡¶æ‡¶§‡ßÄ‡ßü ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ‡¶≤‡ßü‡ßá‡¶∞ ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡ß≠‡ß¶‡¶ü‡¶ø ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ï‡¶∞‡ßá‡•§"""
    print("\n--- ‡¶ú‡¶æ‡¶§‡ßÄ‡ßü ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ‡¶≤‡ßü‡ßá‡¶∞ ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ---")
    scraped_data = []
    try:
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True)
            page = browser.new_page()
            page.goto(BASE_URL, timeout=120000)
            page.wait_for_selector("table.customListTable", timeout=60000)
            time.sleep(3)

            rows = page.locator("table.customListTable tbody tr")
            count = min(rows.count(), 80)  # ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡¶æ‡ßú‡¶æ‡¶§‡ßá ‡¶¨‡¶æ ‡¶ï‡¶Æ‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®
            print(f"‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü‡ßá {rows.count()} ‡¶ü‡¶ø ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá, ‡¶™‡ßç‡¶∞‡¶•‡¶Æ {count} ‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")

            for i in range(count):
                row = rows.nth(i)
                title_element = row.locator("td:first-child")
                link_element = title_element.locator("a")

                if link_element.count() > 0:
                    title = title_element.inner_text().strip().replace("\n", " ")
                    href = link_element.get_attribute("href")
                    full_url = urljoin(BASE_URL, href)
                    scraped_data.append({"title": title, "url": full_url})

            browser.close()
        print(f"üéØ ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶•‡ßá‡¶ï‡ßá {len(scraped_data)} ‡¶ü‡¶ø ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        return scraped_data
    except Exception as e:
        print(f"‚ùå ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
        return []


# ---------- Main Logic ----------
if __name__ == "__main__":
    print("--- ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá ---")

    # ‡¶ß‡¶æ‡¶™ ‡ßß: ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)
    handle_telegram_updates()

    # ‡¶ß‡¶æ‡¶™ ‡ß®: CSV ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶ó‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡ßá‡¶∞ URL ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
    previously_scraped_urls = load_scraped_urls_from_csv()
    print(f"\nüîé ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá ({CSV_FILE_NAME}) {len(previously_scraped_urls)} ‡¶ü‡¶ø ‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡ßá‡¶∞ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§")

    # ‡¶ß‡¶æ‡¶™ ‡ß©: ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®
    all_recent_notices = scrape_nu_notices()

    if not all_recent_notices:
        print("\n‚ùå ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡ßü‡¶®‡¶ø‡•§ ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
    else:
        # ‡¶ß‡¶æ‡¶™ ‡ß™: ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡¶ó‡ßÅ‡¶≤‡ßã ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
        new_notices = []
        for notice in all_recent_notices:
            if notice['url'] not in previously_scraped_urls:
                new_notices.append(notice)

        if not new_notices:
            print("\n‚úÖ ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶Ü‡¶™-‡¶ü‡ßÅ-‡¶°‡ßá‡¶ü ‡¶Ü‡¶õ‡ßá‡•§")
        else:
            print(f"\n‚ú® {len(new_notices)} ‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá!")

            # ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶â‡¶≤‡ßç‡¶ü‡ßã ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶Ø‡¶æ‡¶§‡ßá ‡¶™‡ßÅ‡¶∞‡ßã‡¶®‡ßã‡¶ü‡¶æ ‡¶Ü‡¶ó‡ßá ‡¶Ø‡¶æ‡ßü
            for notice in reversed(new_notices):
                print(f"\n‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç: {notice['title'][:60]}...")

                # ‡¶ß‡¶æ‡¶™ ‡ß´: ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡¶ü‡¶ø CSV ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
                append_notice_to_csv(notice)
                print("   - CSV ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

                # ‡¶ß‡¶æ‡¶™ ‡ß¨: ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®
                send_telegram_notification(notice)

    print("\n--- ‡¶Æ‡¶ø‡¶∂‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ---")
